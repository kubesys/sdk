/**
 * Copyright (2019, ) Institute of Software, Chinese Academy of Sciences
 */
package io.github.kubestack.client.impl.vms;

import java.util.regex.Pattern;

import io.github.kubestack.client.KubeStackClient;
import io.github.kubestack.client.api.models.vms.VirtualMachinePool;
import io.github.kubestack.client.api.specs.vms.VirtualMachinePoolSpec;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.AutoStartPool;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.CleanVMBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.CleanVMRemoteBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.CreatePool;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.DeletePool;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.DeleteRemoteBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.DeleteRemoteBackupServer;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.DeleteVMBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.DeleteVMDiskBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.PullRemoteBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.PushRemoteBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.RestoreDisk;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.RestoreVMBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.ScanVMBackup;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.StartPool;
import io.github.kubestack.client.api.specs.vms.virtualmachinepool.Lifecycle.StopPool;
import io.github.kubestack.client.impl.AbstractImpl;
import io.github.kubestack.core.utils.RegExpUtils;

/**
 * @author  wuheng@otcaix.iscas.ac.cn
 * 
 * @version 1.0.0
 * @since   2019/9/1
 **/
public class VirtualMachinePoolImpl extends AbstractImpl<VirtualMachinePool, VirtualMachinePoolSpec> {

	public VirtualMachinePoolImpl(KubeStackClient client, String kind) {
		super(client, kind);
		// TODO Auto-generated constructor stub
	}

	@Override
	public VirtualMachinePool getModel() {
		return new VirtualMachinePool();
	}

	@Override
	public VirtualMachinePoolSpec getSpec() {
		return new VirtualMachinePoolSpec();
	}
	
	@Override
	public Object getLifecycle() {
		return new Lifecycle();
	}

	/*************************************************
	 * 
	 * Generated by <code>MethodGenerator<code>
	 * 
	 **************************************************/
	public boolean autoStartPool(String name, AutoStartPool autoStartPool) throws Exception {
		return autoStartPool(name, autoStartPool, null);
	}

	public boolean autoStartPool(String name, AutoStartPool autoStartPool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), autoStartPool);
	}

	public boolean autoStartPool(String name, String nodeName, AutoStartPool autoStartPool) throws Exception {
		updateHost(name, nodeName);
		return autoStartPool(name, autoStartPool, null);
	}

	public boolean autoStartPool(String name, String nodeName, AutoStartPool autoStartPool, String eventId) throws Exception {
		updateHost(name, nodeName);
		return autoStartPool(name, autoStartPool, eventId);
	}

	public boolean createPool(String name, CreatePool createPool) throws Exception {
		return createPool(name, null, createPool, null);
	}

	public boolean createPool(String name, String nodeName, CreatePool createPool) throws Exception {
		return createPool(name, nodeName, createPool, null);
	}

	public boolean createPool(String name, CreatePool createPool, String eventId) throws Exception {
		return createPool(name, null, createPool, eventId);
	}

	public boolean createPool(String name, String nodeName,CreatePool createPool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createPool)));
	}

	public boolean startPool(String name, StartPool startPool) throws Exception {
		return startPool(name, startPool, null);
	}

	public boolean startPool(String name, StartPool startPool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), startPool);
	}

	public boolean startPool(String name, String nodeName, StartPool startPool) throws Exception {
		updateHost(name, nodeName);
		return startPool(name, startPool, null);
	}

	public boolean startPool(String name, String nodeName, StartPool startPool, String eventId) throws Exception {
		updateHost(name, nodeName);
		return startPool(name, startPool, eventId);
	}

	public boolean stopPool(String name, StopPool stopPool) throws Exception {
		return stopPool(name, stopPool, null);
	}

	public boolean stopPool(String name, StopPool stopPool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), stopPool);
	}

	public boolean stopPool(String name, String nodeName, StopPool stopPool) throws Exception {
		updateHost(name, nodeName);
		return stopPool(name, stopPool, null);
	}

	public boolean stopPool(String name, String nodeName, StopPool stopPool, String eventId) throws Exception {
		updateHost(name, nodeName);
		return stopPool(name, stopPool, eventId);
	}

	public boolean deletePool(String name, DeletePool deletePool) throws Exception {
		return deletePool(name, deletePool, null);
	}

	public boolean deletePool(String name, DeletePool deletePool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deletePool);
	}

	public boolean deletePool(String name, String nodeName, DeletePool deletePool) throws Exception {
		updateHost(name, nodeName);
		return deletePool(name, deletePool, null);
	}

	public boolean deletePool(String name, String nodeName, DeletePool deletePool, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deletePool(name, deletePool, eventId);
	}


	public boolean showPool(String name, Lifecycle.ShowPool deletePool) throws Exception {
		return showPool(name, deletePool, null);
	}

	public boolean showPool(String name, Lifecycle.ShowPool showPool, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), showPool);
	}

	public boolean showPool(String name, String nodeName, Lifecycle.ShowPool showPool) throws Exception {
		updateHost(name, nodeName);
		return showPool(name, showPool, null);
	}

	public boolean showPool(String name, String nodeName, Lifecycle.ShowPool showPool, String eventId) throws Exception {
		updateHost(name, nodeName);
		return showPool(name, showPool, eventId);
	}

	public boolean restoreVMBackup(String name, RestoreVMBackup restoreVMBackup) throws Exception {
		return restoreVMBackup(name, restoreVMBackup, null);
	}

	public boolean restoreVMBackup(String name, RestoreVMBackup restoreVMBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), restoreVMBackup);
	}

	public boolean restoreVMBackup(String name, String nodeName, RestoreVMBackup restoreVMBackup) throws Exception {
		updateHost(name, nodeName);
		return restoreVMBackup(name, restoreVMBackup, null);
	}

	public boolean restoreVMBackup(String name, String nodeName, RestoreVMBackup restoreVMBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return restoreVMBackup(name, restoreVMBackup, eventId);
	}

	public boolean deleteRemoteBackup(String name, DeleteRemoteBackup deleteRemoteBackup) throws Exception {
		return deleteRemoteBackup(name, deleteRemoteBackup, null);
	}

	public boolean deleteRemoteBackup(String name, DeleteRemoteBackup deleteRemoteBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), deleteRemoteBackup);
	}

	public boolean deleteRemoteBackup(String name, String nodeName, DeleteRemoteBackup deleteRemoteBackup) throws Exception {
		updateHost(name, nodeName);
		return deleteRemoteBackup(name, deleteRemoteBackup, null);
	}

	public boolean deleteRemoteBackup(String name, String nodeName, DeleteRemoteBackup deleteRemoteBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteRemoteBackup(name, deleteRemoteBackup, eventId);
	}

	public boolean pullRemoteBackup(String name, PullRemoteBackup pullRemoteBackup) throws Exception {
		return pullRemoteBackup(name, pullRemoteBackup, null);
	}

	public boolean pullRemoteBackup(String name, PullRemoteBackup pullRemoteBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), pullRemoteBackup);
	}

	public boolean pullRemoteBackup(String name, String nodeName, PullRemoteBackup pullRemoteBackup) throws Exception {
		updateHost(name, nodeName);
		return pullRemoteBackup(name, pullRemoteBackup, null);
	}

	public boolean pullRemoteBackup(String name, String nodeName, PullRemoteBackup pullRemoteBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return pullRemoteBackup(name, pullRemoteBackup, eventId);
	}

	public boolean pushRemoteBackup(String name, PushRemoteBackup pushRemoteBackup) throws Exception {
		return pushRemoteBackup(name, pushRemoteBackup, null);
	}

	public boolean pushRemoteBackup(String name, PushRemoteBackup pushRemoteBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), pushRemoteBackup);
	}

	public boolean pushRemoteBackup(String name, String nodeName, PushRemoteBackup pushRemoteBackup) throws Exception {
		updateHost(name, nodeName);
		return pushRemoteBackup(name, pushRemoteBackup, null);
	}

	public boolean pushRemoteBackup(String name, String nodeName, PushRemoteBackup pushRemoteBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return pushRemoteBackup(name, pushRemoteBackup, eventId);
	}

	public boolean deleteVMBackup(String name, DeleteVMBackup deleteVMBackup) throws Exception {
		return deleteVMBackup(name, deleteVMBackup, null);
	}

	public boolean deleteVMBackup(String name, DeleteVMBackup deleteVMBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), deleteVMBackup);
	}

	public boolean deleteVMBackup(String name, String nodeName, DeleteVMBackup deleteVMBackup) throws Exception {
		updateHost(name, nodeName);
		return deleteVMBackup(name, deleteVMBackup, null);
	}

	public boolean deleteVMBackup(String name, String nodeName, DeleteVMBackup deleteVMBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteVMBackup(name, deleteVMBackup, eventId);
	}

	public boolean cleanVMBackup(String name, CleanVMBackup cleanVMBackup) throws Exception {
		return cleanVMBackup(name, cleanVMBackup, null);
	}

	public boolean cleanVMBackup(String name, CleanVMBackup cleanVMBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), cleanVMBackup);
	}

	public boolean cleanVMBackup(String name, String nodeName, CleanVMBackup cleanVMBackup) throws Exception {
		updateHost(name, nodeName);
		return cleanVMBackup(name, cleanVMBackup, null);
	}

	public boolean cleanVMBackup(String name, String nodeName, CleanVMBackup cleanVMBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return cleanVMBackup(name, cleanVMBackup, eventId);
	}

	public boolean cleanVMRemoteBackup(String name, CleanVMRemoteBackup cleanVMRemoteBackup) throws Exception {
		return cleanVMRemoteBackup(name, cleanVMRemoteBackup, null);
	}

	public boolean cleanVMRemoteBackup(String name, CleanVMRemoteBackup cleanVMRemoteBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), cleanVMRemoteBackup);
	}

	public boolean cleanVMRemoteBackup(String name, String nodeName, CleanVMRemoteBackup cleanVMRemoteBackup) throws Exception {
		updateHost(name, nodeName);
		return cleanVMRemoteBackup(name, cleanVMRemoteBackup, null);
	}

	public boolean cleanVMRemoteBackup(String name, String nodeName, CleanVMRemoteBackup cleanVMRemoteBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return cleanVMRemoteBackup(name, cleanVMRemoteBackup, eventId);
	}

	public boolean scanVmBackup(String name, ScanVMBackup scanVMBackup) throws Exception {
		return scanVmBackup(name, scanVMBackup, null);
	}

	public boolean scanVmBackup(String name, ScanVMBackup scanVMBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), scanVMBackup);
	}

	public boolean scanVmBackup(String name, String nodeName, ScanVMBackup scanVMBackup) throws Exception {
		updateHost(name, nodeName);
		return scanVmBackup(name, scanVMBackup, null);
	}

	public boolean scanVmBackup(String name, String nodeName, ScanVMBackup scanVMBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return scanVmBackup(name, scanVMBackup, eventId);
	}

	public boolean restoreDisk(String name, RestoreDisk restoreDisk) throws Exception {
		return restoreDisk(name, restoreDisk, null);
	}

	public boolean restoreDisk(String name, RestoreDisk restoreDisk, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), restoreDisk);
	}

	public boolean restoreDisk(String name, String nodeName, RestoreDisk restoreDisk) throws Exception {
		updateHost(name, nodeName);
		return restoreDisk(name, restoreDisk, null);
	}

	public boolean restoreDisk(String name, String nodeName, RestoreDisk restoreDisk, String eventId) throws Exception {
		updateHost(name, nodeName);
		return restoreDisk(name, restoreDisk, eventId);
	}

	public boolean deleteVMDiskBackup(String name, DeleteVMDiskBackup deleteVMDiskBackup) throws Exception {
		return deleteVMDiskBackup(name, deleteVMDiskBackup, null);
	}

	public boolean deleteVMDiskBackup(String name, DeleteVMDiskBackup deleteVMDiskBackup, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), deleteVMDiskBackup);
	}

	public boolean deleteVMDiskBackup(String name, String nodeName, DeleteVMDiskBackup deleteVMDiskBackup) throws Exception {
		updateHost(name, nodeName);
		return deleteVMDiskBackup(name, deleteVMDiskBackup, null);
	}

	public boolean deleteVMDiskBackup(String name, String nodeName, DeleteVMDiskBackup deleteVMDiskBackup, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteVMDiskBackup(name, deleteVMDiskBackup, eventId);
	}

	public boolean deleteRemoteBackupServer(String name, DeleteRemoteBackupServer deleteRemoteBackupServer) throws Exception {
		return deleteRemoteBackupServer(name, deleteRemoteBackupServer, null);
	}

	public boolean deleteRemoteBackupServer(String name, DeleteRemoteBackupServer deleteRemoteBackupServer, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), deleteRemoteBackupServer);
	}

	public boolean deleteRemoteBackupServer(String name, String nodeName, DeleteRemoteBackupServer deleteRemoteBackupServer) throws Exception {
		updateHost(name, nodeName);
		return deleteRemoteBackupServer(name, deleteRemoteBackupServer, null);
	}

	public boolean deleteRemoteBackupServer(String name, String nodeName, DeleteRemoteBackupServer deleteRemoteBackupServer, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteRemoteBackupServer(name, deleteRemoteBackupServer, eventId);
	}

	@Override
	protected Class<?> getModelClass() {
		return VirtualMachinePool.class;
	}
}