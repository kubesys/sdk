/**
 * Copyright (2019, ) Institute of Software, Chinese Academy of Sciences
 */
package io.github.kubestack.client.impl.vms;

import java.util.regex.Pattern;

import io.github.kubestack.client.KubeStackClient;
import io.github.kubestack.client.api.models.vms.VirtualMachineDiskSnapshot;
import io.github.kubestack.client.api.specs.vms.VirtualMachineDiskSnapshotSpec;
import io.github.kubestack.client.api.specs.vms.virtualmachinedisksnapshot.Lifecycle;
import io.github.kubestack.client.api.specs.vms.virtualmachinedisksnapshot.Lifecycle.CreateDiskExternalSnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinedisksnapshot.Lifecycle.DeleteDiskExternalSnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinedisksnapshot.Lifecycle.RevertDiskExternalSnapshot;
import io.github.kubestack.client.impl.AbstractImpl;
import io.github.kubestack.core.utils.RegExpUtils;

/**
 * @author  wuheng@otcaix.iscas.ac.cn
 * 
 * @version 2.0.0
 * @since   2022/10/22
 **/
public class VirtualMachineDiskSnapshotImpl extends AbstractImpl<VirtualMachineDiskSnapshot, VirtualMachineDiskSnapshotSpec> {

	public VirtualMachineDiskSnapshotImpl(KubeStackClient client, String kind) {
		super(client, kind);
	}

	@Override
	public VirtualMachineDiskSnapshot getModel() {
		return new VirtualMachineDiskSnapshot();
	}

	@Override
	public VirtualMachineDiskSnapshotSpec getSpec() {
		return new VirtualMachineDiskSnapshotSpec();
	}
	

	@Override
	public Object getLifecycle() {
		return new Lifecycle();
	}


	/*************************************************
	 * 
	 * Generated by <code>MethodGenerator<code>
	 * 
	 **************************************************/
	public boolean createDiskExternalSnapshot(String name, CreateDiskExternalSnapshot createDiskExternalSnapshot) throws Exception {
		return createDiskExternalSnapshot(name, null, createDiskExternalSnapshot, null);
	}

	public boolean createDiskExternalSnapshot(String name, String nodeName, CreateDiskExternalSnapshot createDiskExternalSnapshot) throws Exception {
		return createDiskExternalSnapshot(name, nodeName, createDiskExternalSnapshot, null);
	}

	public boolean createDiskExternalSnapshot(String name, CreateDiskExternalSnapshot createDiskExternalSnapshot, String eventId) throws Exception {
		return createDiskExternalSnapshot(name, null, createDiskExternalSnapshot, eventId);
	}

	public boolean createDiskExternalSnapshot(String name, String nodeName,CreateDiskExternalSnapshot createDiskExternalSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createDiskExternalSnapshot)));
	}

	public boolean revertDiskExternalSnapshot(String name, RevertDiskExternalSnapshot revertDiskExternalSnapshot) throws Exception {
		return revertDiskExternalSnapshot(name, revertDiskExternalSnapshot, null);
	}

	public boolean revertDiskExternalSnapshot(String name, RevertDiskExternalSnapshot revertDiskExternalSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), revertDiskExternalSnapshot);
	}

	public boolean revertDiskExternalSnapshot(String name, String nodeName, RevertDiskExternalSnapshot revertDiskExternalSnapshot) throws Exception {
		updateHost(name, nodeName);
		return revertDiskExternalSnapshot(name, revertDiskExternalSnapshot, null);
	}

	public boolean revertDiskExternalSnapshot(String name, String nodeName, RevertDiskExternalSnapshot revertDiskExternalSnapshot, String eventId) throws Exception {
		updateHost(name, nodeName);
		return revertDiskExternalSnapshot(name, revertDiskExternalSnapshot, eventId);
	}

	public boolean deleteDiskExternalSnapshot(String name, DeleteDiskExternalSnapshot deleteDiskExternalSnapshot) throws Exception {
		return deleteDiskExternalSnapshot(name, deleteDiskExternalSnapshot, null);
	}

	public boolean deleteDiskExternalSnapshot(String name, DeleteDiskExternalSnapshot deleteDiskExternalSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deleteDiskExternalSnapshot);
	}

	public boolean deleteDiskExternalSnapshot(String name, String nodeName, DeleteDiskExternalSnapshot deleteDiskExternalSnapshot) throws Exception {
		updateHost(name, nodeName);
		return deleteDiskExternalSnapshot(name, deleteDiskExternalSnapshot, null);
	}

	public boolean deleteDiskExternalSnapshot(String name, String nodeName, DeleteDiskExternalSnapshot deleteDiskExternalSnapshot, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteDiskExternalSnapshot(name, deleteDiskExternalSnapshot, eventId);
	}

	@Override
	protected Class<?> getModelClass() {
		return VirtualMachineDiskSnapshot.class;
	}
}
