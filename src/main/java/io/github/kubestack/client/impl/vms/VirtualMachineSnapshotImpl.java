/**
 * Copyright (2019, ) Institute of Software, Chinese Academy of Sciences
 */
package io.github.kubestack.client.impl.vms;


import java.util.regex.Pattern;

import io.github.kubestack.client.KubeStackClient;
import io.github.kubestack.client.api.models.vms.VirtualMachineSnapshot;
import io.github.kubestack.client.api.specs.vms.VirtualMachineSnapshotSpec;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle.CopySnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle.CreateSnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle.DeleteSnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle.MergeSnapshot;
import io.github.kubestack.client.api.specs.vms.virtualmachinesnapshot.Lifecycle.RevertVirtualMachine;
import io.github.kubestack.client.impl.AbstractImpl;
import io.github.kubestack.core.utils.RegExpUtils;

/**
 * @author  wuheng@otcaix.iscas.ac.cn
 * 
 * @version 1.0.0
 * @since   2019/9/1
 **/
@SuppressWarnings("deprecation")
public class VirtualMachineSnapshotImpl extends AbstractImpl<VirtualMachineSnapshot, VirtualMachineSnapshotSpec> {

	public VirtualMachineSnapshotImpl(KubeStackClient client, String kind) {
		super(client, kind);
	}

	@Override
	public VirtualMachineSnapshot getModel() {
		return new VirtualMachineSnapshot();
	}

	@Override
	public VirtualMachineSnapshotSpec getSpec() {
		return new VirtualMachineSnapshotSpec();
	}

	@Override
	public Object getLifecycle() {
		return new Lifecycle();
	}

	
	/*************************************************
	 * 
	 * Generated by <code>MethodGenerator<code>
	 * 
	 **************************************************/

	public boolean deleteSnapshot(String name, DeleteSnapshot deleteSnapshot) throws Exception {
		return deleteSnapshot(name, deleteSnapshot, null);
	}

	public boolean deleteSnapshot(String name, DeleteSnapshot deleteSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return delete(name, updateMetadata(name, eventId), deleteSnapshot);
	}

	public boolean deleteSnapshot(String name, String nodeName, DeleteSnapshot deleteSnapshot) throws Exception {
		updateHost(name, nodeName);
		return deleteSnapshot(name, deleteSnapshot, null);
	}

	public boolean deleteSnapshot(String name, String nodeName, DeleteSnapshot deleteSnapshot, String eventId) throws Exception {
		updateHost(name, nodeName);
		return deleteSnapshot(name, deleteSnapshot, eventId);
	}

	public boolean createSnapshot(String name, CreateSnapshot createSnapshot) throws Exception {
		return createSnapshot(name, null, createSnapshot, null);
	}

	public boolean createSnapshot(String name, String nodeName, CreateSnapshot createSnapshot) throws Exception {
		return createSnapshot(name, nodeName, createSnapshot, null);
	}

	public boolean createSnapshot(String name, CreateSnapshot createSnapshot, String eventId) throws Exception {
		return createSnapshot(name, null, createSnapshot, eventId);
	}

	public boolean createSnapshot(String name, String nodeName,CreateSnapshot createSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return create(getModel(), createMetadata(name, nodeName, eventId), 
				createSpec(nodeName, createLifecycle(createSnapshot)));
	}

	public boolean revertVirtualMachine(String name, RevertVirtualMachine revertVirtualMachine) throws Exception {
		return revertVirtualMachine(name, revertVirtualMachine, null);
	}

	public boolean revertVirtualMachine(String name, RevertVirtualMachine revertVirtualMachine, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), revertVirtualMachine);
	}

	public boolean revertVirtualMachine(String name, String nodeName, RevertVirtualMachine revertVirtualMachine) throws Exception {
		updateHost(name, nodeName);
		return revertVirtualMachine(name, revertVirtualMachine, null);
	}

	public boolean revertVirtualMachine(String name, String nodeName, RevertVirtualMachine revertVirtualMachine, String eventId) throws Exception {
		updateHost(name, nodeName);
		return revertVirtualMachine(name, revertVirtualMachine, eventId);
	}

	public boolean copySnapshot(String name, CopySnapshot copySnapshot) throws Exception {
		return copySnapshot(name, copySnapshot, null);
	}

	public boolean copySnapshot(String name, CopySnapshot copySnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), copySnapshot);
	}

	public boolean copySnapshot(String name, String nodeName, CopySnapshot copySnapshot) throws Exception {
		updateHost(name, nodeName);
		return copySnapshot(name, copySnapshot, null);
	}

	public boolean copySnapshot(String name, String nodeName, CopySnapshot copySnapshot, String eventId) throws Exception {
		updateHost(name, nodeName);
		return copySnapshot(name, copySnapshot, eventId);
	}

	public boolean mergeSnapshot(String name, MergeSnapshot mergeSnapshot) throws Exception {
		return mergeSnapshot(name, mergeSnapshot, null);
	}

	public boolean mergeSnapshot(String name, MergeSnapshot mergeSnapshot, String eventId) throws Exception {
		Pattern pattern = Pattern.compile(RegExpUtils.NAME_PATTERN);
		if (!pattern.matcher(name).matches()) {
			throw new IllegalArgumentException("the length must be between 4 and 100, and it can only includes a-z, 0-9 and -.");
		}
		return update(name, updateMetadata(name, eventId), mergeSnapshot);
	}

	public boolean mergeSnapshot(String name, String nodeName, MergeSnapshot mergeSnapshot) throws Exception {
		updateHost(name, nodeName);
		return mergeSnapshot(name, mergeSnapshot, null);
	}

	public boolean mergeSnapshot(String name, String nodeName, MergeSnapshot mergeSnapshot, String eventId) throws Exception {
		updateHost(name, nodeName);
		return mergeSnapshot(name, mergeSnapshot, eventId);
	}

	@Override
	protected Class<?> getModelClass() {
		return VirtualMachineSnapshot.class;
	}
}
